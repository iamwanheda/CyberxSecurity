## Week 5 Homework Submission File: Archiving and Logging Data

Please edit this file by adding the solution commands on the line below the prompt.

Save and submit the completed file for your homework submission.

---

### Step 1: Create, Extract, Compress, and Manage tar Backup Archives

1. Command to **extract** the `TarDocs.tar` archive to the current directory: tar xvf TarDocs.tar

2. Command to **create** the `Javaless_Doc.tar` archive from the `TarDocs/` directory, while excluding the `TarDocs/Documents/Java` directory: tar cvvWf Javaless_Docs.tar --exclude='./Documents/Java' .


3. Command to ensure `Java/` is not in the new `Javaless_Docs.tar` archive: tar tf Javaless_Docs.tar | grep -rw "Java"

**Bonus** 
- Command to create an incremental archive called `logs_backup.tar.gz` with only changed files to `snapshot.file` for the `/var/log` directory: sudo tar cvzf logs_backup.tar.gz --listed-incremental=snapshot.file --level=0 /var/log

#### Critical Analysis Question

- Why wouldn't you use the options `-x` and `-c` at the same time with `tar`?

--- The tar command creates tars backups. You would not use the options together, because one must occur before the other. In other words, you would need to first tar cvf filename.tar before you could extract using tar xvf filename.tar. Otherwise, the file you are attempting to extract would not exist. The system would need to first write (;create; -c) the file,  before it could then restore (extract; -x) the file. An archive, however, could be restored and created in a new target location, for example tar xvf filename.tar -C /directory/here/.

### Step 2: Create, Manage, and Automate Cron Jobs

1. Cron job for backing up the `/var/log/auth.log` file: cd var/log
mkdir auth_backup
* 6 * * 3 sudo tar cvzf auth_backup.tgz /var/log/auth.log -C /var/log/auth_backup
---

### Step 3: Write Basic Bash Scripts

1. Brace expansion command to create the four subdirectories: mkdir -p backups/{freemem,diskuse,openlist,freedisk}

2. Paste your `system.sh` script edits below:

    ```bash
    #!/bin/bash
#FREE MEMORY ON SYSTEM FILE
cd ~/backups/freemem
echo "Free Memory"
free -h >> free_mem.txt

#FREE DISK SPACE FILE
cd ~/backups/diskuse
echo "Disk Usage"
du -h >> disk_usage.txt

#ALL OPEN FILES ON FILE
cd ~/backups/openlist
echo "Open Files"
lsof >> open_list.txt

#SYSTEM DISKSPACE STATISTICS
cd /backups/freedisk
echo "System Disk Space Stats"
df -h >> free_disk.txt


    ```

3. Command to make the `system.sh` script executable: sudo chmod +x system.sh

**Optional**
- Commands to test the script and confirm its execution: sudo ./system.sh

**Bonus**
- Command to copy `system` to system-wide cron directory: crontab -echo
0 0 * * 0 sudo ~/system.sh


---

### Step 4. Manage Log File Sizes
 
1. Run `sudo nano /etc/logrotate.conf` to edit the `logrotate` configuration file. 

    Configure a log rotation scheme that backs up authentication messages to the `/var/log/auth.log`.

    - Add your config file edits below:

    ```bash
    /var/log/auth.log {
	Weekly
	rotate 7
	Notifempty
	Delaycompress
	Missingok
	endscript
	}
    ```
---

### Bonus: Check for Policy and File Violations

1. Command to verify `auditd` is active: sudo systemctl status auditd

2. Command to set number of retained logs and maximum log file size:

    - Add the edits made to the configuration file below: sudo nano /etc/audit/auditd.conf

    ```bash
	max_log_file=35
	num_logs=7
    ```

3. Command using `auditd` to set rules for `/etc/shadow`, `/etc/passwd` and `/var/log/auth.log`:


    - Add the edits made to the `rules` file below: sudo nano /etc/audit/rules.d/audit.rules

    ```bash
	-w /etc/shadow -p wra -k hashpass_audit
	-w /etc/passwd -p wra -k userpass_audit
	-w /var/log/auth.log -p wra -k authlog_audit
    ```

4. Command to restart `auditd`: sudo systemctl restart auditd

5. Command to list all `auditd` rules: sudo auditctl -l

6. Command to produce an audit report: sudo aureport -au

7. Create a user with `sudo useradd attacker` and produce an audit report that lists account modifications: sudo useradd attacker
sudo aureport -m

8. Command to use `auditd` to watch `/var/log/cron`: sudo auditctl -w /var/log/cron

9. Command to verify `auditd` rules: sudo auditctl -l

---

### Bonus (Research Activity): Perform Various Log Filtering Techniques

1. Command to return `journalctl` messages with priorities from emergency to error: sudo journalctl -b -p emerg..err

1. Command to check the disk usage of the system journal unit since the most recent boot: sudo journalctl -b -u systemd-journald | less

1. Comand to remove all archived journal files except the most recent two: sudo journalctl --vacuum-files=2


1. Command to filter all log messages with priority levels between zero and two, and save output to `/home/sysadmin/Priority_High.txt`: sudo su
cd..
journalctl -p 0..2 > /home/student/Priority_High.txt

1. Command to automate the last command in a daily cronjob. Add the edits made to the crontab file below: sudo crontab -e

    ```bash
    @daily journalctl -p 0..2 > /home/student/Priority_High.txt
    ```

---
Â© 2020 Trilogy Education Services, a 2U, Inc. brand. All Rights Reserved.
